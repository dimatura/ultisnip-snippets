snippet typecaster "pybind11 custom type caster" b
template <> struct type_caster<${1:CppType}> {
	public:
	PYBIND11_TYPE_CASTER($1, _("$1"));
	bool load(handle src, bool) {
		if (!is_ros_msg_type(src, "${1/::/\//g}")) { return false; }
		value.x = (src.attr("x")).cast<double>();
		return true;
	}

	static handle cast($1 cpp_msg, return_value_policy policy, handle parent) {
		object mod = module::import("${1/::\w+//g}.msg._${1/\w+::*//}");
		object MsgType = mod.attr("${1/\w+::*//}");
		object msg = MsgType();
		msg.attr("x") = pybind11::cast(pt.x);
		msg.inc_ref();
		return msg;
	}
};$0
endsnippet

snippet pybind11_numpy_vector "pybind11 wrap vector numpy" b
py::array py_length(py::array_t<double, py::array::c_style | py::array::forcecast> array) {
	// check input dimensions
	if ( array.ndim() != 2 )
		throw std::runtime_error("Input should be 2-D NumPy array");
	if ( array.shape()[1] != 2 )
		throw std::runtime_error("Input should have size [N,2]");

	std::vector<double> pos(array.size());
	std::memcpy(pos.data(),array.data(),array.size()*sizeof(double));
	std::vector<double> result = length(pos);

	ssize_t ndim = 2;
	std::vector<ssize_t> shape = { array.shape()[0] , 3 };
	std::vector<ssize_t> strides = { sizeof(double)*3 , sizeof(double) };

	// return 2-D NumPy array
	return py::array(py::buffer_info(
		result.data(),                           /* data as contiguous array  */
		sizeof(double),                          /* size of one scalar        */
		py::format_descriptor<double>::format(), /* data type                 */
		ndim,                                    /* number of dimensions      */
		shape,                                   /* shape of the matrix       */
		strides                                  /* strides for each axis     */
	));
}
endsnippet

snippet pybind11_module1 "simple pybind11" b
#include <pybind11/pybind11.h>

int add(int i, int j) {
	return i + j;
}

PYBIND11_MODULE(example, m) {
	m.doc() = "pybind11 example plugin"; // optional module docstring
	m.def("add", &add, "A function which adds two numbers", py::arg("i"), py::arg("j")=0);
}
endsnippet


snippet pybind11_objects "pybind11 objects" b
PYBIND11_MODULE(example, m) {
	m.attr("the_answer") = 42;
	// can also cast other wrapped C++ classes
	py::object world = py::cast("World");
	m.attr("what") = world;
	// object is a py::object
	MyClass *cls = obj.cast<MyClass *>();

}
endsnippet

snippet pybind11_class "pybind11 class example" b
struct Pet {
	Pet(const std::string &name) : name(name) { }
	void setName(const std::string &name_) { name = name_; }
	const std::string &getName() const { return name; }

	std::string name;
};

// for dynamic attributes, class_<Pet>(m, "Pet", py::dynamic_attr())
// to use unique_ptr/shared_ptr<Pet>, do py::class_<Pet, std::shared_ptr<Pet>>
// may need to do PYBIND11_DECLARE_HOLDER_TYPE(T, boost::shared_ptr<T>); once
PYBIND11_MODULE(example, m) {
	py::class_<Pet>(m, "Pet")
		.def(py::init<const std::string &>())
		.def("setName", &Pet::setName)
		.def("getName", &Pet::getName)
		.def_readwrite("name", &Pet::name)
		// also consider
		// .def_property("name", &Pet::getName, &Pet::setName)
		// .def_readwrite_static()
		// .def_readonly_static()
		// .def_property_static()
		// .def_property_readonly_static()
		.def("__repr__",
		[](const Pet &a) {
			return "<example.Pet named '" + a.name + "'>";
		}
	);
}
endsnippet

snippet pybind11_tuples "pybind11 tuples" b
// * unpacking
py::tuple args = py::make_tuple(1234, "hello", some_instance);
f(*args);

// ** unpacking
py::dict kwargs = py::dict("number"_a=1234, "say"_a="hello", "to"_a=some_instance);
f(**kwargs);

// mixed keywords, * and ** unpacking
py::tuple args = py::make_tuple(1234);
py::dict kwargs = py::dict("to"_a=some_instance);
f(*args, "say"_a="hello", **kwargs);
endsnippet

snippet pybind11_overload "pybind11 overload example" b
double mul ( double a , double b ) {
	std::cout << "Double" << std::endl;
	return a*b;
}

int mul ( int a , int b ) {
	std::cout << "Int" << std::endl;
	return a*b;
}

namespace py = pybind11;

PYBIND11_MODULE(example,m) {
	m.doc() = "pybind11 example plugin";
	m.def("mul", py::overload_cast<int   ,int   >(&mul) );
	m.def("mul", py::overload_cast<double,double>(&mul) );
}
endsnippet

snippet pybind11_typecasting "pybind11 typecasting matrix ex." b
#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <pybind11/numpy.h>

template <class T>
class Matrix {
	private:
		std::vector<T> _data;
		std::vector<size_t> _shape;
		std::vector<size_t> _strides;
	public:
		Matrix<T>(){};
		Matrix<T>( std::vector<size_t> shape, const T *data=NULL )
			if ( shape.size()<1 || shape.size()>3 )
				throw std::runtime_error("Input should be 1-D, 2-D, or 3-D");
			// store '_strides' and '_shape' always in 3-D,
			// use unit-length for "extra" dimensions (> 'shape.size()')
			while ( _shape	.size()<3 ) { _shape.push_back(1); }
			while ( _strides.size()<3 ) { _strides.push_back(1); }
			for (int i=0; i<shape.size(); i++)
				_shape[i] = shape[i];

			_strides[0] = _shape[2]*_shape[1];
			_strides[1] = _shape[2];
			_strides[2] = 1;
			int size = _shape[0]*_shape[1]*_shape[2];
			for ( int i=0 ; i<_data.size() ; i++ )
				_data[i] = (T)0;
			while ( _data.size()<size )
				_data.push_back((T)0);
			if ( data!=NULL )
				for (int i=0 ; i<size ; i++)
					_data[i] = data[i];
		};

		Matrix(const Matrix<T> &) = default;
		Matrix<T>& operator= (const Matrix<T> &) = default;

		T& operator[] ( size_t i ) { return _data[i]; };

		T& operator() ( size_t h, size_t i=0, size_t j=0 )
		{ return _data[h*_strides[0]+i*_strides[1]+j*_strides[2]]; };

		auto begin() { return _data.begin(); }
		auto end () { return _data.end	(); }

		const T* data ( void ) const {return _data.data();};

		std::vector<size_t> shape ( int ndim=0 ) const {
			if ( ndim==0 )
				ndim = this->ndim();
			std::vector<size_t> ret(ndim);
			for ( int i=0 ; i<ndim ; i++ )
				ret[i] = _shape[i];
			return ret;
		};

		std::vector<size_t> strides ( bool bytes=false ) const {
			int ndim = this->ndim();
			std::vector<size_t> ret(ndim);
			for (int i=0 ; i<ndim ; i++)
				ret[i] = _strides[i];
			if (bytes)
				for (int i=0 ; i<ndim ; i++)
					ret[i] *= sizeof(T);
			return ret;
		};

		size_t size ( void ) const { return _data.size(); };

		size_t ndim ( void ) const {
			size_t i;
			for ( i=2 ; i>0 ; i-- )
				if ( _shape[i]!=1 )
					break;
			return i+1;
		};
}; // class Matrix

namespace py = pybind11;

// type caster: Matrix <-> NumPy-array
namespace pybind11 { namespace detail {
template <typename T> struct type_caster<Matrix<T>> {
	public:
		PYBIND11_TYPE_CASTER(Matrix<T>, _("Matrix<T>"));
		// Conversion part 1 (Python -> C++)
		bool load(py::handle src, bool convert) {
			if (!convert && !py::array_t<T>::check_(src))
				return false;

			auto buf = py::array_t<T, py::array::c_style | py::array::forcecast>::ensure(src);
			if (!buf)
				return false;

			auto dims = buf.ndim();
			if (dims < 1 || dims > 3)
				return false;

			std::vector<size_t> shape(buf.ndim());

			for ( int i=0 ; i<buf.ndim() ; i++ )
				shape[i] = buf.shape()[i];

			value = Matrix<T>(shape,buf.data());
			return true;
		}

		//Conversion part 2 (C++ -> Python)
		static py::handle cast(const Matrix<T>& src,
			py::return_value_policy policy, py::handle parent) {
			py::array a(std::move(src.shape()), std::move(src.strides(true)), src.data());
			return a.release();
		}
};
}}
endsnippet

snippet pybind11_buffer_protocol "pybind11 buf protocol" b
class Matrix {
public:
	Matrix(size_t rows, size_t cols) : m_rows(rows), m_cols(cols) {
		m_data = new float[rows*cols];
	}
	float *data() { return m_data; }
	size_t rows() const { return m_rows; }
	size_t cols() const { return m_cols; }
private:
	size_t m_rows, m_cols;
	float *m_data;
};

py::class_<Matrix>(m, "Matrix", py::buffer_protocol())
	.def_buffer([](Matrix &m) -> py::buffer_info {
		return py::buffer_info(
			m.data(),                               /* Pointer to buffer */
			sizeof(float),                          /* Size of one scalar */
			py::format_descriptor<float>::format(), /* Python struct-style format descriptor */
			2,                                      /* Number of dimensions */
			{ m.rows(), m.cols() },                 /* Buffer dimensions */
			{ sizeof(float) * m.rows(), sizeof(float) } /* Strides (in bytes) for each index */
		);
	});
endsnippet

snippet pybind11_structs "pybind11 structured types" b
struct A {
	int x;
	double y;
};

PYBIND11_MODULE(test, m) {
	PYBIND11_NUMPY_DTYPE(A, x, y);
	/* now both A and B can be used as template arguments to py::array_t */
}
endsnippet

snippet pybind11_array_access "pybind11 array access" b
m.def("increment_3d", [](py::array_t<double> x) {
		auto r = x.mutable_unchecked<3>(); // Will throw if ndim != 3 or flags.writeable is false
		for (ssize_t i = 0; i < r.shape(0); i++)
				for (ssize_t j = 0; j < r.shape(1); j++)
						for (ssize_t k = 0; k < r.shape(2); k++)
								r(i, j, k) += 1.0;
}, py::arg().noconvert());
// proxies have .ndim(), .data(i, j, ...), .itemsize(), .shape(n), .nbytes()
endsnippet

snippet pybind11_eval "pybind11 eval expressions" b
#include <pybind11/eval.h>
//...
// Evaluate in scope of main module
py::object scope = py::module::import("__main__").attr("__dict__");

// Evaluate an isolated expression
int result = py::eval("my_variable + 10", scope).cast<int>();

// Evaluate a sequence of statements
py::exec(
	"print('Hello')\n"
	"print('world!');",
	scope);

// Evaluate the statements in an separate Python file on disk
py::eval_file("script.py", scope);
endsnippet

snippet pybind11_strings "pybind11 strings" b
// return bytes without unicode conversion
m.def("return_bytes",
	[]() {
		std::string s("\xba\xd0\xba\xd0");  // Not valid UTF-8
		return py::bytes(s);  // Return the data without transcoding
	}
);
endsnippet
