## STL Collections
# std::array
snippet array "array"
std::array<${1:T}, ${2:N}> ${3};${4}
endsnippet

# std::vector
snippet vec "vec"
std::vector<${1}>
endsnippet

#snippet vector "vector"
#std::vector<${1:T}> ${2};${3}
#endsnippet

# std::deque
snippet deque "deque"
std::deque<${1:T}> ${2};${3}
endsnippet

# std::forward_list
snippet flist "flist"
std::forward_list<${1:T}> ${2};${3}
endsnippet

# std::list
snippet list "list"
std::list<${1:T}> ${2};${3}
endsnippet

# std::set
snippet set "set"
std::set<${1:T}> ${2};${3}
endsnippet

# std::map
#snippet map "map"
#std::map<${1:Key}, ${2:T}> ${3};${4}
#endsnippet

# std::multiset
snippet mset "mset"
std::multiset<${1:T}> ${2};${3}
endsnippet

# std::multimap
snippet mmap "mmap"
std::multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet

# std::unordered_set
snippet uset "uset"
std::unordered_set<${1:T}> ${2};${3}
endsnippet

# std::unordered_map
snippet umap "umap"
std::unordered_map<${1:Key}, ${2:T}> ${3};${4}
endsnippet

# std::unordered_multiset
snippet umset "umset"
std::unordered_multiset<${1:T}> ${2};${3}
endsnippet

# std::unordered_multimap
snippet ummap "ummap"
std::unordered_multimap<${1:Key}, ${2:T}> ${3};${4}
endsnippet

# std::stack
snippet stack "stack"
std::stack<${1:T}> ${2};${3}
endsnippet

# std::queue
snippet queue "queue"
std::queue<${1:T}> ${2};${3}
endsnippet

# std::priority_queue
snippet pqueue "pqueue"
std::priority_queue<${1:T}> ${2};${3}
endsnippet

##
## Access Modifiers
# private
snippet pri "pri"
private
endsnippet

# protected
snippet pro "pro"
protected
endsnippet

# public
snippet pub "pub"
public
endsnippet

# friend
snippet fr "fr"
friend
endsnippet

# mutable
snippet mu "mu"
mutable
endsnippet

##
## Class
# class
snippet cl "cl"
class ${1:} {
public:
	$1(${2:});
	virtual ~$1();
private:
	$1 (const $1& other);
	$1& operator=(const $1& other);
	${3}
};${4}
endsnippet

# member function implementation
snippet mfun "mfun"
${4:void} ${1:`!v vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
	${5}
}
endsnippet

# namespace
#snippet ns "ns"
#namespace ${1}
#{
#	${2}
#}
#endsnippet

##
## Input/Output
# std::cout
snippet cout "cout"
std::cout << ${1}
endsnippet

# std::cerr
snippet cerr "cerr"
std::cerr << ${1}
endsnippet

# std::cin
snippet cin "cin"
std::cin >> ${1};${2}
endsnippet

##
## Iteration
# for i
#snippet fori "fori"
#for (${1}::iterator ${2:itr} = ${3:}.begin();
#	${4:$2} != ${5:$3}.end();
#	++${6:$2}) {
#	${7}
#}${8}
#endsnippet

# foreach
snippet fore "fore"
for (${1:auto} ${2:i} : ${3:container}) {
	${4}
}${5}
endsnippet

snippet dbg "dbg"
std::cerr << "${1:} = " << ${2:$1} << std::endl;${3}
endsnippet

# iterator
snippet iter "iter"
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}${7}
endsnippet

# auto iterator
snippet itera "itera"
for (auto ${1:i} = $1.begin(); $1 != $1.end(); ++$1) {
	${2:std::cout << *$1 << std::endl;}
}${3}
endsnippet

##
## Lambdas
# lamda (one line)
snippet ld "ld"
[${1}](${2}){${3}}${4}
endsnippet

# lambda (multi-line)
snippet lld "lld"
[${1}](${2}){
	${3}
}${4}
endsnippet

# opencv
snippet cvm "cvm"
cv::Mat
endsnippet

snippet cvm_ "cvm_"
cv::Mat_<${1}> ${2}
endsnippet

# eigen
snippet eim "eim"
Eigen::Matrix
endsnippet

snippet eim_ "eim_"
Eigen::Matrix<${1:type}, ${2:rows}, ${3:cols}> ${4}
endsnippet

snippet eiv "eiv"
Eigen::Vector
endsnippet

snippet std "std"
std::
endsnippet

# boost
snippet b "b"
boost::
endsnippet

snippet boost "boost"
boost::
endsnippet

snippet bg "bg"
begin()
endsnippet

snippet end "end"
end()
endsnippet

snippet sz "sz"
size_t
endsnippet

snippet . "."
::
endsnippet

snippet pcl "pcl"
pcl::
endsnippet

snippet pclc "pclc"
pcl::console::print_
endsnippet

snippet cr "cr"
"\n"
endsnippet

snippet using "using"
using namespace ${1}
endsnippet

snippet scast "scast"
static_cast<${1}>()
endsnippet

snippet it "it"
iterator
endsnippet

snippet opio "opio"
std::ostream& operator<<(std::ostream& os, const ${1})${2}
endsnippet

#snippet enum "enum"
#enum ${1:MyEnum} {
#	${2}
#};${3}
#endsnippet

snippet ositer "ositer"
std::copy(${1:}.begin(), ${2:}.end(), std::ostream_iterator<${3}>(${4:std::cout}, ${5:" "});${6:}
endsnippet

# boost format
snippet bformat "bformat"
boost::format("${1:}%1%${2:}")%${3:};${4:}
endsnippet

# boost foreach
snippet bfor "bfor"
BOOST_FOREACH(${1}, ${2}) {
	${3}
}${4}
endsnippet

### will these overwrite the original?
snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`} {
public:
	${1/(\w+).*/$1/} (${2:});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[]) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:++$2}) {
	${VISUAL}${0:${VISUAL/(.*)/(?1::\/* code *\/)/}}
}
endsnippet


